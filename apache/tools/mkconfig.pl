#!/usr/bin/env perl

use strict;
use warnings;

use Cwd qw( realpath );
use Data::Dumper;
use File::Find;
use File::Spec;
use Getopt::Long;

use constant HOME    => realpath( '.' );
use constant PROJECT => realpath( '..' );

my %config = (
  domain => 'localhost',
  suffix => '',
);

my %AP_MOD = (
  '/usr/local/apache2/bin/httpd' => [ '/usr/local/apache2/modules', ],
  _default_                      => [
    '/usr/lib/apache2/modules', '/etc/httpd/modules',
    '/usr/libexec/apache2',
  ],
);

GetOptions(
  'domain:s' => \$config{domain},
  'suffix:s' => \$config{suffix},
) or die "Stopping\n";

my $infile  = shift || die "Missing infile\n";
my $outfile = shift || in_to_out( $infile );
die "Too many arguments" if @ARGV;

my $ctx = build_context( $infile );
process( $infile, $ctx, $outfile );

sub process {
  my ( $infile, $ctx, $outfile ) = @_;
  open my $in,  '<', $infile  or die "Can't read $infile: $!\n";
  open my $out, '>', $outfile or die "Can't write $outfile: $!\n";
  my $ln      = 1;
  my $get_var = sub {
    my $name = shift;
    return $ctx->{$name} if exists $ctx->{$name};
    die "$infile, line $ln: can't resolve variable $name\n";
  };
  while ( defined( my $line = <$in> ) ) {
    $line =~ s/\[%\s*(\w+)\s*%\]/$get_var->($1)/eg;
    print $out $line;
    $ln++;
  }
}

sub build_context {
  my $src = shift;
  my ( $ap_host, $ap_port ) = split /:/,
   ( $ENV{AV2012_APACHE} || '*:4321' );
  my $ctx = {
    %config,
    warning     => "Autogenerated from $src by $0",
    home        => HOME,
    www         => File::Spec->catdir( PROJECT ),
    modules     => ap_mod(),
    apache_host => $ap_host,
    apache_port => $ap_port,
    uid         => scalar getpwuid( $ENV{SUDO_UID} || $> ),
    gid         => scalar getgrgid( $ENV{SUDO_GID} || $) ),
  };
  return $ctx;
}

sub ap_mod {
  my $list = $AP_MOD{ $ENV{HTTPD} || '' } || $AP_MOD{_default_};
  for my $d ( @$list ) {
    return $d if -d $d;
  }
  die "Can't find apache modules\n";
}

sub in_to_out {
  my $name = shift;
  $name =~ s/\.in$//
   or die "Can't turn $name into an output filename\n";
  return $name;
}

sub tidy {
  my $s = shift;
  $s =~ s/^\s+//;
  $s =~ s/\s+$//;
  return $s;
}

# vim:ts=2:sw=2:sts=2:et:ft=perl

